*nvim-lcl-lisp-runner.txt*A Neovim plugin to execute Common Lisp without any external dependencies.
=============================================================================
nvim-lcl-lisp-runner~

This Neovim plugin allows you to execute Common Lisp code directly from your editor using a floating window without any external dependencies. The plugin also provides Prolog and Eliza implemented in Common Lisp for demo.

Features ~
                                              *nvim-lcl-lisp-runner-features*

    - Run Common Lisp files using the `:RunLCL` command.
    - Run Prolog programs written in Common Lisp using the `:RunProlog` command.
    - Run Eliza programs written in Common Lisp using the `:RunEliza` command.
    - Automatically closes the terminal window after execution completes.

Requirements ~
                                          *nvim-lcl-lisp-runner-requirements*

    - Neovim 0.5 or later built with LuaJIT (not Lua).

Installation ~
                                          *nvim-lcl-lisp-runner-installation*

Using packer.nvim |https://github.com/wbthomason/packer.nvim|:

>
  ```lua
  use {
    'siraragi62/nvim-lcl-lisp-runner',
    config = function()
      require('nvim-lcl-lisp-runner')
    end
  }
  ```
<

Setup ~
                                                 *nvim-lcl-lisp-runner-setup*

All you need is calling `require('nvim-lcl-lisp-runner')`.

>
  ```lua
  require('nvim-lcl-lisp-runner')
  ```
<

Commands ~
                                              *nvim-lcl-lisp-runner-commands*

`:RunLCL [file]` ~
                                               *nvim-lcl-lisp-runner-:RunLCL*

Loads and runs the specified Common Lisp file, with the REPL taking over after execution. If `%` is given, the current file is used. If no file is given, the REPL starts without loading any file.

Example:

>
  ```vim
  :RunLCL
  :RunLCL path/to/file.lisp
  :RunLCL %
  ```
<

`:RunProlog` ~
                                            *nvim-lcl-lisp-runner-:RunProlog*

Executes the PAIP Prolog interpreter in Common Lisp.

Example:

>
  ```vim
  :RunProlog
  ```
<

`:RunEliza` ~
                                             *nvim-lcl-lisp-runner-:RunEliza*

Executes the PAIP Eliza in Common Lisp.

Example:

>
  ```vim
  :RunEliza
  ```
<

How it works ~
                                          *nvim-lcl-lisp-runner-how-it-works*

Common Lisp runs on LCL, a Common Lisp implementation in Lua. Eliza and Prolog are both implemented by running the Common Lisp implementation included in PAIP on LCL.

Limitations ~
                                           *nvim-lcl-lisp-runner-limitations*

Since LCL is not a complete Common Lisp implementation, there are some constraints on execution.

    - Some standard library functions are not referenced in this version, even though they are implemented by LCL. Programs that depend on them must reimplement the standard functions themselves. Standard library implementations |https://codeberg.org/gsou/LCL/src/branch/main/stdlib| are available in the LCL repository.
    - Common Lisp cannot be run on the original Lua interpreter in this version. Run it on Neovim with LuaJIT (official binaries, default build settings use LuaJIT).

Tips ~
                                                  *nvim-lcl-lisp-runner-tips*

LCL can call Lua functions through the LCL Lua API, so you can extend as needed. See the README |https://codeberg.org/gsou/LCL#headline-9| in the LCL repository for instructions on how to use the LCL Lua API.

License~

This plugin is licensed under the MIT License.

Acknowledgement~

LCL, a Lua implementation of Common Lisp, is provided under the MIT License by gsou. Eliza and Prolog implementations in Common Lisp are provided under the MIT License by Peter Norvig at PAIP. All of these components are copyrighted by the original copyright holder under the MIT License.


vim:tw=78:ts=8:noet:ft=help:norl:
